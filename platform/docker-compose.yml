# Services used by the IoT platform
# ----------------------------------
# The IoT platform uses the following services:
# - Orion Context Broker (OCB)
# - IoT Agent JSON (IOTAJ)
# - Mongo DB (MongoDB)
# - PostreSQL (PostgreSQL)
# - Cygnus (Cygnus)
# - Grafana (Grafana)



services:

  # Orion is the context broker
  orion:
    image: fiware/orion
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    networks:
      - default
    expose:
      - "1026"
    ports:
      - "1026:1026"
    command: -dbhost mongo-db -logLevel DEBUG
    healthcheck:
      test: curl --fail -s http://orion:1026/version || exit 1
      interval: 300s

  # IoT-Agent is configured for json protocol
  iot-agent-json:
    image: fiware/iotagent-json
    hostname: iot-agent-json
    container_name: fiware-iot-agent-json
    depends_on:
        - mongo-db
    networks:
        - default
    expose:
        - "4041"
        - "7896"
    ports:
        - "4041:4041"
        - "7896:7896"
    environment:
        - IOTA_CB_HOST=orion
        - IOTA_CB_PORT=1026
        - IOTA_NORTH_PORT=4041
        - IOTA_REGISTRY_TYPE=mongodb
        - IOTA_LOG_LEVEL=DEBUG
        - IOTA_TIMESTAMP=true
        - IOTA_CB_NGSI_VERSION=v2
        - IOTA_AUTOCAST=true
        - IOTA_MONGO_HOST=mongo-db
        - IOTA_MONGO_PORT=27017
        - IOTA_MONGO_DB=iotagentjson
        - IOTA_HTTP_PORT=7896
        - IOTA_PROVIDER_URL=http://iot-agent:4041
        - IOTA_DEFAULT_RESOURCE=/iot/json

  # Non-relational database for IoT-Agent and Orion
  mongo-db:
    image: mongo
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "27017"
    ports:
      - "27017:27017"
    networks:
      - default
    volumes:
      - mongo-db:/data
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`; 
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 300s

  # Relational database 
  postgres-db:
    image: postgres:latest
    hostname: postgres-db
    container_name: db-postgres
    expose:
        - "5432"
    ports:
        - "5432:5432"
    networks:
        - default
    environment:
        - "POSTGRES_PASSWORD=vfarm2022"
        - "POSTGRES_USER=verticalfarm"
        - "POSTGRES_DB=vfarm"
    volumes:
        - postgres-db:/var/lib/postgresql/data

  # Cygnus is used to persist data in the database 
  cygnus:
    image: fiware/cygnus-ngsi:latest
    hostname: cygnus
    container_name: fiware-cygnus
    networks:
        - default
    depends_on:
        - postgres-db
    expose:
        - "5080"
    ports:
        - "5055:5055"
        - "5080:5080"
    environment:
        - "CYGNUS_POSTGRESQL_HOST=postgres-db"
        - "CYGNUS_POSTGRESQL_PORT=5432"
        - "CYGNUS_POSTGRESQL_USER=verticalfarm"
        - "CYGNUS_POSTGRESQL_PASS=vfarm2022"
        - "CYGNUS_POSTGRESQL_ENABLE_CACHE=true"
        - "CYGNUS_POSTGRESQL_SERVICE_PORT=5055"
        - "CYGNUS_LOG_LEVEL=DEBUG"
        - "CYGNUS_API_PORT=5080"
        - "CYGNUS_SERVICE_PORT=5055"
  
  # Grafana is used to visualize data
  grafana:
    image: grafana/grafana
    depends_on:
        - postgres-db
    ports:
        - "3003:3000"
    environment:
        - GF_INSTALL_PLUGINS=https://github.com/orchestracities/grafana-map-plugin/archive/master.zip;grafana-map-plugin,grafana-clock-panel,grafana-worldmap-panel

  web-application:
    hostname: web-application
    container_name: web-application
    build: ./web-application
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./web-application:/code
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_NAME=vfarm
      - POSTGRES_USER=verticalfarm
      - POSTGRES_PASSWORD=vfarm2022
    depends_on:
      - postgres-db

networks:
  default:

volumes:
  mongo-db: ~
  postgres-db: ~
